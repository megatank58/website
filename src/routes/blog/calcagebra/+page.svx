---
title: Calcagebra
---

# { title }

## What is Calcagebra?

Calcagebra is a mathematical expression evaluator supposed to be somewhat like Mathematica or MATLAB.

Currently Calcagebra has support with a lot of fundamentals like trigonometry, graphing equations (plotters), rounding, squaring etc and has support for complex numbers and matrices. It can do a good amount of basic calculations on these such as inverse of matrices and squares of complex numbers.

## How does Calcagebra work?

Calcagebra's syntax looks like this (may change in future):

```rust
let a = 3 + 4i

// Now we can print the modulus of the complex number

print(|a|) // 5
```

Calcagebra works in three stages:

### Lexer

The lexer first divides the entire code into lines and then iterates char by char on every line.

It starts with the first character of the first line which is `l`, it continues till it cannot find any more alphabets and then matches the complete word (in this case `let`) to check if its a valid `Token`.

In this case it is and so we get `Token::Let`, we do similarly for the rest of chars, ignoring whitespaces.

`Token` is simply an enum consisting of all the possible keywords, operators, identifiers possible in the language. For Calcagebra the token enum has become quite large but it looks somewhat like this.

```rust
enum Token {
    Let,
    Fn,
    
    // ...

    Ident(String)
    Float(Decimal)
}
```

Identifiers like `a` are stored as `String`, while for numbers we use a rust crate called `rust_decimal` that provides us with `Decimal`.

Once a Token is matched, we store its location in the form of a `Range` as well for error reporting in a structure known as `TokenInfo` in Calcagebra.

```rust
struct TokenInfo {
    token: Token,
    range: Range<usize>,
}
```

At the end when the entire line is lexed, the `Vec<TokenInfo>` is returned to be stored as a single line. Once all lines are complete we have a `Vec<Vec<TokenInfo>>`. 

Normally this would be it but there's one extra thing happening in this lexer, implicit multiplication. So how does that work? The lexer simply looks at the pattern `Number` followed immediately by `Alphabet`. If this pattern is found a `Token::Mul` is inserted before going ahead to the next token.

### Parser

The parser takes the `Vec<Vec<TokenInfo>>` and converts them into `Vec<Expression>`. An expression is simply anything that can happen in calcagebra, from assignment to function declaration to function calls.

If everything in your language is an expression then it allows for quite funky code:

```rust
graph((fn f(x) = (let a = 5)x^2))
```

The parser similar to the lexer, goes line by line and turns the `Vec<TokenInfo>` we have to `Expression`. Similar to `Token`, `Expression` is also an enum.

```rust
enum Expression {
    Assignment((String, Option<DataType>), Box<Expression>)
    // ...
}
```

After parsing is finished we end up with `Vec<Expression>`.

### Interpreting

This is the easiest step of all three, the lines are evaluated one by one, any variable or function declarations are stored in a `HashMap` along with standard library functions.